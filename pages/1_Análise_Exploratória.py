import streamlit as st
import pandas as pd
import numpy as np # Usado para c√°lculos num√©ricos como logaritmo e raiz quadrada
import plotly.graph_objects as go
import plotly.express as px
from statsmodels.tsa.seasonal import seasonal_decompose # Para decompor a s√©rie temporal
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf # Para gr√°ficos de autocorrela√ß√£o
from statsmodels.tsa.stattools import adfuller # Para o teste de estacionariedade (ADF)
import matplotlib.pyplot as plt # Para alguns gr√°ficos estat√≠sticos
from utils import load_historical_data # Fun√ß√£o para carregar os dados

st.set_page_config(page_title="An√°lise Explorat√≥ria do Pre√ßo do Petr√≥leo", page_icon="üìä", layout="wide")

st.title("üìä Desvendando a Din√¢mica do Pre√ßo do Petr√≥leo Brent (√öltimos 10 Anos)")
st.markdown("""
Bem-vindo √† nossa an√°lise do pre√ßo do petr√≥leo Brent! O mercado de petr√≥leo √© como um grande palco global onde muitos fatores ‚Äì desde decis√µes pol√≠ticas e econ√¥micas at√© a nossa constante necessidade por energia ‚Äì se encontram e influenciam os pre√ßos.
Nesta explora√ß√£o, vamos viajar pelos √∫ltimos 10 anos de dados para entender melhor o que fez o pre√ßo do barril subir e descer, e como esses movimentos podem nos dar pistas para o futuro.
Para nossos stakeholders, o objetivo √© tornar claro como interpretamos esses dados e quais s√£o os aprendizados chave.
""")

# Carregar dados (a fun√ß√£o em utils.py j√° filtra para os √∫ltimos 10 anos)
df_historical_10a = load_historical_data()

if df_historical_10a.empty:
    st.error("Ops! Parece que n√£o conseguimos carregar os dados hist√≥ricos dos √∫ltimos 10 anos. Por favor, verifique a fonte dos dados.")
    st.stop()

# Informa o per√≠odo coberto pela an√°lise
st.info(f"Nossa an√°lise cobre o per√≠odo de **{df_historical_10a['Data'].min().strftime('%d/%m/%Y')}** at√© **{df_historical_10a['Data'].max().strftime('%d/%m/%Y')}**.")

# Prepara uma c√≥pia dos dados de valor, indexada pela data, para an√°lises estat√≠sticas
df_for_analysis_stats = df_historical_10a.set_index('Data')['Value'].copy()

st.header("üé¢ A Montanha-Russa dos Pre√ßos: Uma D√©cada em Perspectiva")
st.markdown("""
Imagine o pre√ßo do petr√≥leo como uma montanha-russa. O gr√°fico abaixo nos mostra essa jornada na √∫ltima d√©cada.
Voc√™ ver√° subidas √≠ngremes, quedas abruptas e momentos de maior calmaria. Cada movimento tem uma hist√≥ria por tr√°s.

Para nos ajudar a ver al√©m das flutua√ß√µes di√°rias, adicionamos duas linhas:
* **M√©dia M√≥vel de 50 dias (linha laranja pontilhada):** Suaviza os pre√ßos das √∫ltimas ~10 semanas, mostrando a tend√™ncia de curto prazo.
* **M√©dia M√≥vel de 200 dias (linha vermelha tracejada):** Suaviza os pre√ßos dos √∫ltimos ~9 meses, indicando a tend√™ncia de longo prazo.
Quando a linha de curto prazo cruza a de longo prazo, isso pode sinalizar mudan√ßas na dire√ß√£o do mercado.

Tamb√©m destacamos alguns eventos mundiais importantes para vermos como eles se relacionam com o sobe e desce dos pre√ßos.
""")

# Calcula as m√©dias m√≥veis
df_historical_10a['MA50'] = df_historical_10a['Value'].rolling(window=50).mean()
df_historical_10a['MA200'] = df_historical_10a['Value'].rolling(window=200).mean()

# Cria o gr√°fico interativo com Plotly
fig_hist_ma = go.Figure()
fig_hist_ma.add_trace(go.Scatter(x=df_historical_10a['Data'], y=df_historical_10a['Value'],
                               mode='lines', name='Pre√ßo Brent (Di√°rio)', line=dict(color='deepskyblue', width=2)))
fig_hist_ma.add_trace(go.Scatter(x=df_historical_10a['Data'], y=df_historical_10a['MA50'],
                               mode='lines', name='M√©dia M√≥vel 50 Dias (Tend√™ncia Curto Prazo)', line=dict(color='orange', width=1.5, dash='dot')))
fig_hist_ma.add_trace(go.Scatter(x=df_historical_10a['Data'], y=df_historical_10a['MA200'],
                               mode='lines', name='M√©dia M√≥vel 200 Dias (Tend√™ncia Longo Prazo)', line=dict(color='crimson', width=1.5, dash='dash')))

# Lista de eventos importantes para anotar no gr√°fico
eventos = [
    {'Data': '2014-11-27', 'descricao': 'OPEP decide manter produ√ß√£o, queda de pre√ßos', 'event_color': 'white', 'ay_offset': -35},
    {'Data': '2016-01-20', 'descricao': 'Pre√ßo atinge m√≠nima da d√©cada p√≥s-decis√£o OPEP', 'event_color': 'white', 'ay_offset': -55},
    {'Data': '2020-03-11', 'descricao': 'COVID-19 declarada pandemia global', 'event_color': 'white', 'ay_offset': -35},
    {'Data': '2020-04-20', 'descricao': 'Pre√ßo do petr√≥leo WTI fica negativo (afeta Brent)', 'event_color': 'white', 'ay_offset': -45},
    {'Data': '2022-02-24', 'descricao': 'In√≠cio da Guerra na Ucr√¢nia', 'event_color': 'white', 'ay_offset': -35}
]
eventos_filtrados_plot_ma = [e for e in eventos if pd.to_datetime(e['Data']) >= df_historical_10a['Data'].min() and pd.to_datetime(e['Data']) <= df_historical_10a['Data'].max()]
annotations_list_ma = []
shapes_list_ma = []
max_y_plot_ma = df_historical_10a['Value'].max() if not df_historical_10a.empty else 150
min_y_plot_ma = df_historical_10a['Value'].min() if not df_historical_10a.empty else 0

# Determinar a posi√ß√£o Y da anota√ß√£o mais alta para ajustar o yaxis_range dinamicamente
max_annotation_y_multiplier = 1.05
if eventos_filtrados_plot_ma:
    max_annotation_y_multiplier = 1.05 + (len(eventos_filtrados_plot_ma) - 1) * 0.05

for i, evento in enumerate(eventos_filtrados_plot_ma):
    event_date = pd.to_datetime(evento['Data'])
    # Linha vertical para marcar o evento
    shapes_list_ma.append({
        'type': 'line',
        'x0': event_date, 'y0': 0,      # Come√ßa na base da √°rea de plotagem
        'x1': event_date, 'y1': 0.75,    # MODIFICADO: Termina em 90% da altura da √°rea de plotagem
        'xref': 'x', 'yref': 'paper',   # 'paper' refere-se √† √°rea de plotagem total
        'line': {
            'color': evento['event_color'],
            'width': 2,
            'dash': 'dashdot'
        }
    })
    # Anota√ß√£o descritiva do evento
    annotations_list_ma.append({
        'x': event_date,
        'y': max_y_plot_ma * (1.05 + i*0.05),
        'xref': 'x', 'yref': 'y',
        'text': f"<b>{evento['descricao']}</b><br>({event_date.strftime('%b %Y')})",
        'showarrow': True, 'arrowhead': 2, 'arrowwidth':1.5,
        'arrowcolor': evento['event_color'],
        'ax': 0, 'ay': evento['ay_offset'],
        'font': {'color': 'black', 'size': 10},
        'bgcolor': 'white',
        'opacity': 0.85,
        'bordercolor': evento['event_color'],
        'borderwidth':1, 'borderpad':3
        })

# Ajustar o limite superior do eixo Y para ser um pouco acima da anota√ß√£o mais alta
yaxis_upper_bound = max_y_plot_ma * (max_annotation_y_multiplier + 0.10)

fig_hist_ma.update_layout(
    title_text='Pre√ßo do Brent, M√©dias M√≥veis e Eventos Chave (√öltimos 10 Anos)',
    xaxis_title='Data', yaxis_title='Pre√ßo (US$ por Barril)', template='plotly_white',
    height=700,
    shapes=shapes_list_ma, annotations=annotations_list_ma,
    yaxis_range=[min_y_plot_ma * 0.85, yaxis_upper_bound],
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
)
st.plotly_chart(fig_hist_ma, use_container_width=True)

# --- Se√ß√£o 2: Decifrando os Eventos e Seus Impactos ---
st.markdown("---")
st.header("üóìÔ∏è Decifrando os Eventos e Seus Impactos: O Que Aprendemos?")
st.markdown("""
Analisar o gr√°fico acima nos ajuda a entender como certos acontecimentos globais podem sacudir o mercado de petr√≥leo.
A seguir, alguns dos principais aprendizados que tiramos ao observar a rela√ß√£o entre os eventos e os pre√ßos:
""")

insight_cols = st.columns(2)
with insight_cols[0]:
    st.subheader("Insight 1: O Poder da OPEP e a Guerra de Pre√ßos (2014-2016)")
    st.markdown("No final de 2014, a OPEP (Organiza√ß√£o dos Pa√≠ses Exportadores de Petr√≥leo) surpreendeu o mundo ao decidir **n√£o cortar sua produ√ß√£o**, mesmo com mais petr√≥leo vindo dos EUA (o chamado √≥leo de xisto). O resultado? Os **pre√ßos despencaram**, como uma pedra rolando ladeira abaixo, at√© o in√≠cio de 2016. Isso mostra como as decis√µes de grandes produtores podem ditar o rumo dos pre√ßos.")

    st.subheader("Insight 2: COVID-19 - Um Choque de Demanda Sem Precedentes (2020)")
    st.markdown("A chegada da pandemia em 2020 foi um baque enorme. Com o mundo parando (lockdowns, voos cancelados, menos carros nas ruas), a **procura por petr√≥leo caiu drasticamente**. O gr√°fico mostra essa queda brusca em mar√ßo/abril de 2020. A recupera√ß√£o dos pre√ßos foi lenta, acompanhando a reabertura gradual das economias e os cortes de produ√ß√£o feitos pela OPEP e seus aliados (OPEP+).")
with insight_cols[1]:
    st.subheader("Insight 3: Tens√µes Geopol√≠ticas e o \"Pr√™mio de Risco\" (Guerra na Ucr√¢nia, 2022)")
    st.markdown("Quando a **R√∫ssia invadiu a Ucr√¢nia em fevereiro de 2022**, o mercado ficou muito preocupado com a oferta de petr√≥leo, j√° que a R√∫ssia √© um grande produtor. Esse medo de faltar petr√≥leo fez os **pre√ßos dispararem**. Chamamos isso de \"pr√™mio de risco geopol√≠tico\" ‚Äì basicamente, o pre√ßo sobe porque h√° uma incerteza grande sobre o fornecimento futuro devido a conflitos.")

    st.subheader("Insight 4: A Recupera√ß√£o P√≥s-Pandemia e a Nova Din√¢mica (2021-Presente)")
    st.markdown("Depois do susto da COVID-19, os pre√ßos se recuperaram bem em 2021 e parte de 2022. A economia mundial estava voltando ao normal e a OPEP+ controlava a produ√ß√£o. Mas, mais recentemente (2023-2024), novas preocupa√ß√µes com infla√ß√£o alta e um crescimento econ√¥mico mais fraco no mundo trouxeram mais instabilidade e altos e baixos para os pre√ßos.")

st.subheader("Insight Adicional: A Volatilidade √© a Regra, N√£o a Exce√ß√£o")
st.markdown("Olhando para toda a d√©cada, uma coisa fica clara: o pre√ßo do petr√≥leo √© **vol√°til**, ou seja, muda bastante e √†s vezes de forma muito r√°pida. Momentos de calmaria s√£o muitas vezes seguidos por grandes saltos ou quedas. Isso acontece porque o pre√ßo √© influenciado por uma teia complexa de fatores: quanta oferta existe, quanta demanda existe, e o que est√° acontecendo na pol√≠tica global.")

# --- Se√ß√£o 3: Mergulhando Mais Fundo nos Dados ---
st.markdown("---")
st.header("üîç Mergulhando Mais Fundo: Desvendando Padr√µes Escondidos")
st.markdown("""
Agora, vamos usar algumas ferramentas estat√≠sticas para olhar os dados de formas diferentes.
Isso nos ajuda a encontrar padr√µes que n√£o s√£o √≥bvios apenas olhando o gr√°fico de pre√ßos.
N√£o se preocupe com os nomes t√©cnicos, vamos focar no que cada an√°lise nos diz.
""")

# --- 3.1 Decomposi√ß√£o da S√©rie Temporal ---
st.subheader("Separando o Sinal do Ru√≠do: Tend√™ncia, Sazonalidade e Res√≠duos")
st.markdown("""
**O que √© isso?** A "decomposi√ß√£o" √© como desmontar um motor para entender cada pe√ßa. Separamos o movimento do pre√ßo em tr√™s partes:
* **Tend√™ncia:** A dire√ß√£o geral do pre√ßo ao longo do tempo (est√° subindo, descendo ou est√°vel no longo prazo?).
* **Sazonalidade:** Padr√µes que se repetem em intervalos fixos? Por exemplo, ser√° que o pre√ßo do petr√≥leo tende a ser mais alto em certos meses do ano, todos os anos? (Usamos um ciclo anual de ~252 dias √∫teis).
* **Res√≠duo:** O que sobra depois de tirarmos a tend√™ncia e a sazonalidade. S√£o as flutua√ß√µes mais aleat√≥rias, o "ru√≠do" do mercado.

**Por que isso importa?** Entender essas partes nos ajuda a ver se existem padr√µes previs√≠veis e o qu√£o "barulhento" ou imprevis√≠vel √© o mercado.
""")
decomp_period = 252 # Aproximadamente o n√∫mero de dias √∫teis em um ano, para tentar capturar uma sazonalidade anual.
if len(df_for_analysis_stats.dropna()) >= decomp_period * 2: # Precisamos de pelo menos dois ciclos completos para decompor
    try:
        decomposition = seasonal_decompose(df_for_analysis_stats.dropna(), model='additive', period=decomp_period)

        fig_decomp = plt.figure(figsize=(12, 10)) # Aumentado o tamanho para melhor visualiza√ß√£o

        # Gr√°fico da S√©rie Original
        ax_original = fig_decomp.add_subplot(411)
        df_for_analysis_stats.plot(ax=ax_original, legend=False)
        ax_original.set_ylabel('Pre√ßo Original')
        ax_original.set_title('Decomposi√ß√£o da S√©rie Temporal do Pre√ßo do Brent', fontsize=14)

        # Gr√°fico da Tend√™ncia
        ax_trend = fig_decomp.add_subplot(412, sharex=ax_original) # Compartilha o eixo X com o original
        decomposition.trend.plot(ax=ax_trend, legend=False)
        ax_trend.set_ylabel('Tend√™ncia')
        ax_trend.tick_params(axis='x', which='both', bottom=False, labelbottom=False) # Remove labels do eixo x para economizar espa√ßo

        # Gr√°fico da Sazonalidade
        ax_seasonal = fig_decomp.add_subplot(413, sharex=ax_original)
        decomposition.seasonal.plot(ax=ax_seasonal, legend=False)
        ax_seasonal.set_ylabel(f'Sazonalidade ({decomp_period}d)')
        ax_seasonal.tick_params(axis='x', which='both', bottom=False, labelbottom=False)

        # Gr√°fico do Res√≠duo
        ax_resid = fig_decomp.add_subplot(414, sharex=ax_original)
        decomposition.resid.plot(ax=ax_resid, legend=False, linestyle=':')
        ax_resid.set_ylabel('Res√≠duo (Ru√≠do)')

        plt.xlabel("Data") # Adiciona label do eixo X apenas no √∫ltimo gr√°fico
        plt.tight_layout() # Ajusta o layout para evitar sobreposi√ß√µes
        st.pyplot(fig_decomp)
        st.markdown("""
        * **Observando a Tend√™ncia:** Vemos a dire√ß√£o de longo prazo, filtrando as oscila√ß√µes di√°rias.
        * **Observando a Sazonalidade:** Se houver um padr√£o claro que se repete anualmente, ele aparecer√° aqui. Muitas vezes, no petr√≥leo, a sazonalidade pode ser sutil ou ofuscada por grandes eventos.
        * **Observando o Res√≠duo:** Mostra as varia√ß√µes que n√£o s√£o explicadas pela tend√™ncia ou sazonalidade. Idealmente, queremos que os res√≠duos sejam aleat√≥rios.
        """)
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel realizar a decomposi√ß√£o da s√©rie. Pode ser que n√£o haja dados suficientes ou outro problema t√©cnico: {e}")
else:
    st.warning(f"N√£o temos dados suficientes (precisamos de pelo menos {decomp_period*2} dias) para realizar a decomposi√ß√£o com um per√≠odo anual de {decomp_period} dias.")

# --- 3.2 Distribui√ß√£o dos Pre√ßos e Retornos ---
st.subheader("Com Que Frequ√™ncia Cada Pre√ßo (ou Varia√ß√£o de Pre√ßo) Ocorreu?")
st.markdown("""
Aqui, olhamos para dois tipos de "fotografias" dos dados:
1.  **Histograma dos Pre√ßos:** Mostra quantas vezes o pre√ßo do petr√≥leo atingiu cada faixa de valor (ex: quantas vezes esteve entre $50-$55, $55-$60, etc.). Ajuda a ver se existem n√≠veis de pre√ßo mais comuns.
2.  **Distribui√ß√£o dos Retornos Di√°rios:** Em vez do pre√ßo em si, olhamos para a *varia√ß√£o percentual* do pre√ßo de um dia para o outro (o "retorno"). Isso nos diz se grandes varia√ß√µes di√°rias s√£o comuns ou raras.
""")

df_historical_10a['RetornoDiario'] = df_historical_10a['Value'].pct_change() # Calcula a varia√ß√£o percentual di√°ria
df_returns_analysis_app = df_historical_10a.dropna(subset=['RetornoDiario']) # Remove dias sem retorno (o primeiro dia)

col_dist_preco, col_dist_ret = st.columns(2)
with col_dist_preco:
    fig_hist_dist = px.histogram(df_historical_10a, x="Value", nbins=50, title="Como os Pre√ßos se Distribu√≠ram?")
    fig_hist_dist.update_layout(bargap=0.1, yaxis_title="Frequ√™ncia (n¬∫ de dias)", xaxis_title="Pre√ßo (US$)")
    st.plotly_chart(fig_hist_dist, use_container_width=True)
    st.markdown("Este gr√°fico (histograma) mostra a frequ√™ncia de diferentes n√≠veis de pre√ßo. Barras mais altas indicam faixas de pre√ßo que ocorreram mais vezes nos √∫ltimos 10 anos.")

with col_dist_ret:
    if not df_returns_analysis_app.empty:
        fig_ret_dist_app = px.histogram(df_returns_analysis_app, x="RetornoDiario", nbins=100, title="Como as Varia√ß√µes Di√°rias de Pre√ßo se Distribu√≠ram?")
        fig_ret_dist_app.update_layout(bargap=0.1, yaxis_title="Frequ√™ncia (n¬∫ de dias)", xaxis_title="Varia√ß√£o Percentual Di√°ria")
        st.plotly_chart(fig_ret_dist_app, use_container_width=True)
        st.markdown("""
        Este gr√°fico mostra a frequ√™ncia das varia√ß√µes percentuais di√°rias do pre√ßo.
        * **"Caudas Pesadas" (Curtose Alta):** Se voc√™ vir que varia√ß√µes extremas (muito positivas ou muito negativas, nas pontas do gr√°fico) s√£o mais frequentes do que o esperado numa curva "normal" (forma de sino), dizemos que a distribui√ß√£o tem "caudas pesadas". Isso significa que dias com grandes surpresas (altas ou baixas fortes) s√£o mais comuns.
        * **Assimetria:** Se o gr√°fico pender mais para um lado, indica se as varia√ß√µes positivas foram mais/menos frequentes ou intensas que as negativas.
        """)
        st.write(f"**Curtose dos Retornos (qu√£o 'pesadas' s√£o as caudas):** {df_returns_analysis_app['RetornoDiario'].kurtosis():.2f} (Valores > 3 indicam caudas mais pesadas que o normal)")
        st.write(f"**Assimetria dos Retornos (o quanto pende para um lado):** {df_returns_analysis_app['RetornoDiario'].skew():.2f} (Pr√≥ximo de 0 √© sim√©trico; negativo pende para retornos negativos; positivo para retornos positivos)")
    else:
        st.warning("N√£o foi poss√≠vel gerar a distribui√ß√£o dos retornos di√°rios.")

# --- 3.3 Volatilidade ao Longo do Tempo ---
st.subheader("Medindo a Febre do Mercado: A Volatilidade dos Pre√ßos")
st.markdown("""
**O que √© Volatilidade?** Pense na volatilidade como a "intensidade das varia√ß√µes" do pre√ßo. Se o pre√ßo sobe e desce muito e rapidamente, a volatilidade √© alta. Se ele muda pouco, √© baixa.
Calculamos uma "volatilidade m√≥vel": para cada dia, olhamos para o desvio padr√£o (uma medida de qu√£o espalhados est√£o os dados) dos retornos di√°rios nos √∫ltimos 30 dias. Multiplicamos por um fator para ter uma ideia anualizada.

**Por que isso importa?** Este gr√°fico nos mostra os per√≠odos em que o mercado esteve mais "nervoso" ou incerto (picos de volatilidade) versus per√≠odos de maior calmaria. Geralmente, os picos coincidem com aqueles eventos importantes que vimos antes.
""")
if not df_returns_analysis_app.empty:
    # Calcula a volatilidade m√≥vel de 30 dias, anualizada
    df_historical_10a['Volatilidade30d'] = df_returns_analysis_app['RetornoDiario'].rolling(window=30).std() * np.sqrt(252) # 252 dias √∫teis no ano

    fig_vol = px.line(df_historical_10a.dropna(subset=['Volatilidade30d']),
                      x='Data', y='Volatilidade30d',
                      title='Intensidade das Varia√ß√µes do Pre√ßo (Volatilidade M√≥vel Anualizada)')
    fig_vol.update_layout(yaxis_title='Volatilidade Anualizada Estimada', xaxis_title='Data', template='plotly_white')
    st.plotly_chart(fig_vol, use_container_width=True)
    st.markdown("Picos neste gr√°fico indicam per√≠odos de alta incerteza e instabilidade nos pre√ßos, frequentemente ligados a eventos econ√¥micos ou geopol√≠ticos significativos.")
else:
    st.warning("N√£o foi poss√≠vel calcular a volatilidade m√≥vel, pois n√£o h√° dados de retorno di√°rio.")

# --- Se√ß√£o 4: Padr√µes de Autocorrela√ß√£o e Estacionariedade ---
st.markdown("---")
st.header("üß† Entendendo a Mem√≥ria dos Pre√ßos e sua Estabilidade")
st.markdown("""
Nesta se√ß√£o, vamos investigar duas coisas importantes para quem quer prever pre√ßos:
1.  **Estacionariedade:** Basicamente, queremos saber se as caracter√≠sticas do pre√ßo do petr√≥leo (como a m√©dia e a volatilidade) mudam muito com o tempo. Pense num rio: um rio estacion√°rio tem um fluxo e n√≠vel mais ou menos constantes. Um n√£o-estacion√°rio pode ter secas e enchentes. Modelos de previs√£o geralmente funcionam melhor com dados "estacion√°rios".
2.  **Autocorrela√ß√£o:** Queremos ver se o pre√ßo de hoje tem rela√ß√£o com o pre√ßo de ontem, de anteontem, etc. Isso √© como perguntar: o pre√ßo tem "mem√≥ria"?
""")

# --- 4.1 Teste de Estacionariedade (ADF) ---
st.subheader("O Pre√ßo √© Est√°vel ao Longo do Tempo? (Teste ADF)")
st.markdown("""
Usamos um teste estat√≠stico chamado **Augmented Dickey-Fuller (ADF)** para verificar a estacionariedade.
* **Hip√≥tese Nula (H0) do teste:** A s√©rie N√ÉO √© estacion√°ria (possui raiz unit√°ria, ou seja, tem uma tend√™ncia que n√£o se reverte).
* **P-valor:** Se o p-valor for baixo (geralmente < 0.05), rejeitamos H0 e conclu√≠mos que a s√©rie √â provavelmente estacion√°ria. Se for alto, n√£o podemos dizer que √© estacion√°ria.

Muitas vezes, os pre√ßos brutos n√£o s√£o estacion√°rios. Uma transforma√ß√£o comum √© usar a **log-diferen√ßa**, que √© basicamente olhar para a varia√ß√£o percentual di√°ria de uma forma um pouco diferente. Isso ajuda a estabilizar a s√©rie.
""")
if not df_for_analysis_stats.dropna().empty:
    # Teste na s√©rie original de pre√ßos
    adf_result_orig = adfuller(df_for_analysis_stats.dropna())
    st.write(f"**1. Teste nos Pre√ßos Originais ('Value'):**")
    st.write(f"  - Estat√≠stica do Teste ADF: {adf_result_orig[0]:.4f}")
    st.write(f"  - P-valor: {adf_result_orig[1]:.4f}")
    if adf_result_orig[1] <= 0.05:
        st.markdown("  - <span style='color:green'>**Conclus√£o: A s√©rie de pre√ßos original PARECE ser estacion√°ria (P-valor ‚â§ 0.05).**</span> (Isso √© incomum para s√©ries de pre√ßos brutos, vale investigar mais a fundo se outros indicadores como ACF/PACF e o gr√°fico visual tamb√©m sugerem isso).", unsafe_allow_html=True)
    else:
        st.markdown("  - <span style='color:red'>**Conclus√£o: A s√©rie de pre√ßos original N√ÉO parece ser estacion√°ria (P-valor > 0.05).**</span> (Isso √© o esperado para a maioria das s√©ries de pre√ßos.)", unsafe_allow_html=True)
    st.caption(f"  Valores Cr√≠ticos do Teste: 1%: {adf_result_orig[4]['1%']:.2f}, 5%: {adf_result_orig[4]['5%']:.2f}, 10%: {adf_result_orig[4]['10%']:.2f}. Se a Estat√≠stica ADF for menor (mais negativa) que esses valores, isso refor√ßa a estacionariedade.")

    # Transforma√ß√£o: logaritmo e depois diferencia√ß√£o
    log_series = np.log(df_for_analysis_stats.dropna().replace(0, 1e-9)) # Evitar log(0), substituindo 0 por um valor muito pequeno
    diff_log_series = log_series.diff().dropna() # Pega a diferen√ßa entre um dia e o anterior (na escala log)

    if not diff_log_series.empty:
        adf_result_trans = adfuller(diff_log_series)
        st.write(f"**2. Teste nos Retornos Logar√≠tmicos Diferenciados (uma forma de ver a varia√ß√£o di√°ria):**")
        st.write(f"  - Estat√≠stica do Teste ADF: {adf_result_trans[0]:.4f}")
        st.write(f"  - P-valor: {adf_result_trans[1]:.4f}")
        if adf_result_trans[1] <= 0.05:
            st.markdown("  - <span style='color:green'>**Conclus√£o: A s√©rie transformada PARECE ser estacion√°ria (P-valor ‚â§ 0.05).**</span> (Isso √© bom! Significa que as varia√ß√µes di√°rias s√£o mais est√°veis e previs√≠veis do que os n√≠veis de pre√ßo brutos).", unsafe_allow_html=True)
        else:
            st.markdown("  - <span style='color:red'>**Conclus√£o: Mesmo ap√≥s a transforma√ß√£o, a s√©rie N√ÉO parece ser estacion√°ria (P-valor > 0.05).**</span> (Isso pode indicar a necessidade de outras transforma√ß√µes ou que h√° padr√µes mais complexos).", unsafe_allow_html=True)
    st.markdown("Para construir bons modelos de previs√£o (como ARIMA), geralmente precisamos que os dados sejam estacion√°rios. Se n√£o s√£o, a transforma√ß√£o (como a log-diferencia√ß√£o) √© um passo importante.")
else:
    st.warning("N√£o foi poss√≠vel realizar o teste ADF, pois n√£o h√° dados suficientes na s√©rie principal.")

# --- 4.2 ACF e PACF ---
st.subheader("O Pre√ßo de Hoje Depende do de Ontem? (Gr√°ficos de Autocorrela√ß√£o - ACF e PACF)")
st.markdown("""
Estes gr√°ficos nos ajudam a ver se os pre√ßos passados t√™m "mem√≥ria" e influenciam os pre√ßos atuais.
* **ACF (Fun√ß√£o de Autocorrela√ß√£o):** Mostra a correla√ß√£o do pre√ßo de hoje com os pre√ßos de 1 dia atr√°s, 2 dias atr√°s, 3 dias atr√°s, etc. (chamamos esses "atrasos" ou "lags"). Uma barra que sai da √°rea azul indica uma correla√ß√£o significativa.
* **PACF (Fun√ß√£o de Autocorrela√ß√£o Parcial):** √â um pouco mais esperta. Tamb√©m mostra a correla√ß√£o com pre√ßos passados, mas remove o efeito dos "atrasos" intermedi√°rios. Por exemplo, para o lag 3, ela mostra a correla√ß√£o direta com 3 dias atr√°s, tirando a influ√™ncia que os lags 1 e 2 j√° teriam.

**O que procurar (para a s√©rie de pre√ßos original, que geralmente N√ÉO √© estacion√°ria):**
* **No ACF:** Se as barras diminuem LENTAMENTE, isso √© um forte sinal de que a s√©rie N√ÉO √© estacion√°ria e tem uma tend√™ncia. √â como um eco que demora muito para sumir.
* **No PACF:** Frequentemente, o primeiro lag (1 dia atr√°s) √© muito forte, e os outros caem rapidamente.

**Por que isso importa?** Esses gr√°ficos d√£o pistas importantes para configurar modelos de previs√£o mais avan√ßados (como os modelos ARIMA), ajudando a decidir quantos "atrasos" do passado s√£o importantes para prever o futuro. Para stakeholders, o principal √© saber que estamos investigando esses padr√µes para melhorar a precis√£o das previs√µes.
""")
col1_acf_end, col2_pacf_end = st.columns(2)
if not df_for_analysis_stats.dropna().empty:
    with col1_acf_end:
        fig_acf_plot, ax_acf = plt.subplots(figsize=(8, 4))
        plot_acf(df_for_analysis_stats.dropna(), lags=40, ax=ax_acf) # Mostra at√© 40 dias de atraso
        ax_acf.set_title("Autocorrela√ß√£o (ACF) - Pre√ßos Originais")
        st.pyplot(fig_acf_plot)
        st.markdown("Se as barras do ACF demoram a cair para dentro da √°rea azul, isso sugere que o pre√ßo de hoje √© fortemente influenciado pelos pre√ßos de muitos dias atr√°s, indicando uma tend√™ncia e n√£o-estacionariedade.")
    with col2_pacf_end:
        fig_pacf_plot, ax_pacf = plt.subplots(figsize=(8, 4))
        plot_pacf(df_for_analysis_stats.dropna(), lags=40, ax=ax_pacf, method='ywm') # M√©todo 'ywm' √© comum
        ax_pacf.set_title("Autocorrela√ß√£o Parcial (PACF) - Pre√ßos Originais")
        st.pyplot(fig_pacf_plot)
        st.markdown("O PACF nos ajuda a ver a influ√™ncia direta de um pre√ßo passado espec√≠fico, sem o efeito acumulado dos dias anteriores. Um pico forte no primeiro lag √© comum.")
else:
    st.warning("N√£o foi poss√≠vel plotar os gr√°ficos ACF/PACF, pois n√£o h√° dados suficientes.")


st.markdown("---")
st.subheader("üèÅ Conclus√µes da Nossa Explora√ß√£o Inicial")
st.markdown("""
Ap√≥s essa jornada pelos dados do pre√ßo do petr√≥leo Brent nos √∫ltimos 10 anos, o que aprendemos?

1.  **O Pre√ßo N√£o √© Est√°vel Sozinho (N√£o-Estacion√°rio):** O pre√ßo do petr√≥leo, quando olhado em sua forma bruta, tende a seguir tend√™ncias de longo prazo e n√£o fica variando em torno de uma m√©dia constante. Sua "personalidade" (m√©dia, volatilidade) muda com o tempo. Para prever, geralmente precisamos transformar esses dados (ex: olhando as varia√ß√µes di√°rias) para torn√°-los mais est√°veis.

2.  **Eventos Globais Mandam no Jogo:** Decis√µes da OPEP, crises econ√¥micas globais (como a pandemia de COVID-19) e tens√µes geopol√≠ticas (como a guerra na Ucr√¢nia) t√™m um impacto GIGANTE e muitas vezes imediato nos pre√ßos. Isso torna o mercado de petr√≥leo muito sens√≠vel ao que acontece no mundo.

3.  **A "Febre" do Mercado (Volatilidade) Muda Constantemente:** Vimos que h√° per√≠odos em que os pre√ßos sobem e descem freneticamente (alta volatilidade) e outros de maior calmaria (baixa volatilidade). Entender esses "humores" do mercado √© crucial.

4.  **Padr√µes Anuais (Sazonalidade) Podem Existir, Mas S√£o Discretos:** Nossa an√°lise de decomposi√ß√£o tenta buscar padr√µes que se repetem todo ano. Embora possa haver alguma influ√™ncia sazonal (por exemplo, maior demanda por combust√≠vel de aquecimento no inverno do hemisf√©rio norte), esses padr√µes s√£o frequentemente "abafados" pelos grandes eventos globais. Precisamos investigar mais a fundo se essa sazonalidade √© forte o suficiente para ser usada em modelos de previs√£o.

**E agora?**
Esses aprendizados s√£o como o mapa do tesouro para os pr√≥ximos passos: construir modelos de previs√£o. Eles nos dizem que:
* Precisaremos tratar os dados para que fiquem "estacion√°rios".
* Modelos que consideram a "mem√≥ria" dos pre√ßos (como os que usam ACF/PACF) podem ser √∫teis.
* Seria ideal se pud√©ssemos incorporar o impacto de grandes eventos externos ou indicadores de volatilidade nos nossos modelos, embora isso seja um desafio complexo.

Esta an√°lise explorat√≥ria √© o alicerce. Com ela, estamos mais preparados para escolher as ferramentas certas e construir previs√µes mais informadas sobre o futuro do pre√ßo do petr√≥leo.
""")